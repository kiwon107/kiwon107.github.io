I" '<p>본 포스팅은 “윤성우의 열혈 파이썬 중급편” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="8-1-제너레이터에-대한-이해와-제너레이터-함수">8-1. 제너레이터에 대한 이해와 제너레이터 함수</h2>

<p>전 시간에 iterator 객체에 대해 공부하였다.<br />
제너레이터는 iterator 객체의 한 종류이다. 그러므로, 제너레이터를 전달하고 next 함수를 호출하면 값을 하나씩 얻을 수 있다.<br />
제너레이터를 만드는 방법은 크게 두가지가 있다.<br />
1) 제너레이터 함수 → 제너레이터를 만들기 위한 함수 정의
2) 제너레이터 표현식 → 제너레이터를 만들기 위한 식</p>

<p>먼저 함수 기반 제너레이터를 만들어보자.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">grt_num</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'One'</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Two'</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mi">2</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Three'</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mi">3</span>

<span class="n">grt</span> <span class="o">=</span> <span class="n">grt_num</span><span class="p">()</span>
<span class="nb">type</span><span class="p">(</span><span class="n">grt</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">grt</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">grt</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">grt</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">grt</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) &lt;class 'generator'&gt;
     One
     1
     Two
     2
     Three
     3
    Traceback (most recent call last):
     File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    StopIteration
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">grt_num()</code> 함수를 보면 <code class="language-plaintext highlighter-rouge">yield</code>가 보인다.<br />
함수 안에 <code class="language-plaintext highlighter-rouge">yield</code>가 보인다? 그럼 제너레이터 함수다! 라고 보면 된다.
보다시피 <code class="language-plaintext highlighter-rouge">next</code> 함수를 호추하였더니 <code class="language-plaintext highlighter-rouge">print</code>문과 더불어 <code class="language-plaintext highlighter-rouge">yield</code> 부분도 출력되었다. <code class="language-plaintext highlighter-rouge">yield</code>는 <code class="language-plaintext highlighter-rouge">return</code>의 역할을 하게 되는 것이다!
한번 더 출력하면 StopIteration 예외가 발생한다. 이를 보면 제너레이터 객체는 iterator 객체임에 틀림 없어 보인다.</p>

<h2 id="8-2-제너레이터가-갖는-장점">8-2 제너레이터가 갖는 장점</h2>

<p>두 코드를 비교해보자.</p>

<p>코드1</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">r</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">r</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">r</span>

<span class="n">st</span> <span class="o">=</span> <span class="n">square</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">st</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) 1 4 9 16 25 36 49 64 81
</code></pre></div></div>

<p>코드2</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gsquare</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">i</span> <span class="o">**</span> <span class="mi">2</span>

<span class="n">gst</span> <span class="o">=</span> <span class="n">gsquare</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">gst</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) 1 4 9 16 25 36 49 64 81
</code></pre></div></div>

<p>코드1과 코드2는 같은 결과를 출력한다. 제너레이터 함수 사용 유무만 다를 뿐이다. 과연 두 함수가 각각 차지하는 메모리 공간의 크기는 어떨까?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="n">sys</span><span class="p">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">st</span><span class="p">)</span>
<span class="n">sys</span><span class="p">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">gst</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) 192
     120
</code></pre></div></div>

<p>제너레이터 함수를 사용할 때 메모리 공간 크기가 더 적게 들어간다. 위 예제 코드들이 차지하는 메모리 공간 크기는 얼마 차이가 안나는 것처럼 보인다. 그러나
제너레이터 객체는 반환할 값들을 미리 만들어서 저장하지 않기 때문에 리스트 길이에 상관없이 사용하는 메모리 공간 크기는 동일하다!</p>

<p>앞서 배운 map과 filter 함수는 iterator 객체를 반환한다고 했다. 하지만 사실 이들은 iterator 객체이자 제너레이터 객체라고 하니 참고하자!</p>

<h2 id="8-3-yield-from">8-3. yield from</h2>
<p>위 코드2에서 제너레이터 함수를 구현하기 위해 for문을 사용하였다. 이걸 더 줄일 수 없을까?</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gsquare</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="n">s</span><span class="o">*</span><span class="n">s</span>

<span class="n">gst</span> <span class="o">=</span> <span class="n">gsquare</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">gst</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과)
</code></pre></div></div>
:ET