I"k.<p>본 포스팅은 “윤성우의 열혈 파이썬 중급편” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="20-1-연산자-오버로딩-간단히-이해하기">20-1. 연산자 오버로딩 간단히 이해하기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Account</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">aid</span><span class="p">,</span> <span class="n">abl</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">aid</span> <span class="o">=</span> <span class="n">aid</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">abl</span> <span class="o">=</span> <span class="n">abl</span>
  <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">abl</span> <span class="o">+=</span> <span class="n">m</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'__add__'</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">__sub__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">abl</span> <span class="o">-=</span> <span class="n">m</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'__sub__'</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'__call__'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">aid</span><span class="p">)</span> <span class="o">+</span> <span class="s">':'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">abl</span><span class="p">)</span>
  
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">acnt</span> <span class="o">=</span> <span class="n">Account</span><span class="p">(</span><span class="s">'James01'</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
  <span class="n">acnt</span> <span class="o">+</span> <span class="mi">100</span>  <span class="c1"># == anct.__add__(100)
</span>  <span class="n">acnt</span> <span class="o">-</span> <span class="mi">50</span>   <span class="c1"># == acnt.__sub__(50)
</span>  <span class="k">print</span><span class="p">(</span><span class="n">acnt</span><span class="p">())</span>   <span class="c1"># == print(acnt.__call__())
</span>
<span class="n">main</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) __add__
       __sub__
       __call__
       James01:150
</code></pre></div></div>

<p>acnt + 100 이 <code class="language-plaintext highlighter-rouge">__add__</code> 호출로 이어지는 것! 이것이 연산자 오버로딩 이다!</p>

<h2 id="20-2-적절한-형태로-와---연산자-오버로딩">20-2. 적절한 형태로 +와 - 연산자 오버로딩</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Vector</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
  <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">o</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">o</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">o</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">'Vector({0}, {1})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
  <span class="n">v3</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span>
  <span class="k">print</span><span class="p">(</span><span class="n">v1</span><span class="p">())</span>
  <span class="k">print</span><span class="p">(</span><span class="n">v2</span><span class="p">())</span>
  <span class="k">print</span><span class="p">(</span><span class="n">v3</span><span class="p">())</span>

<span class="n">main</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) Vector(3, 3)
       Vector(7, 7)
       Vector(10, 10)
</code></pre></div></div>

<p>예제처럼 약간 +와 -의 의미가 변형되더라도, 그 뜻이 통하도록 연산자 오버로딩이 동작되어야 한다!</p>

<h2 id="20-3-메소드-__str__의-정의">20-3. 메소드 __str__의 정의</h2>
<p><code class="language-plaintext highlighter-rouge">__str__</code>은 문자열이 반환되도록 정의되어야 한다.<br />
또한, 이 문자열은 해당 객체의 정보를 담고 있어야 한다!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Simple</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">i</span> <span class="o">=</span> <span class="n">i</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Simple</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">__str__</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) __main__.Simple object at 0x0000024AF2681DD8&gt;
       '__main__.Simple object at 0x0000024AF2681DD8&gt;'
</code></pre></div></div>

<p>보다시피 <code class="language-plaintext highlighter-rouge">__str__</code> 메소드 호출로 반환된 문자열 정보에는 클래스 이름과 해당 객체가 저장된 위치(주소) 정보가 출력된다. 일반적으로 이러한 정보는 쓸모가 없으므로, 유용하게 쓰일 수 있도록 오버라딩 하는 것이 좋다!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Vector</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
  <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">o</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">o</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">o</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">'Vector({0}, {1})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
  <span class="n">v3</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span>
  <span class="k">print</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">v3</span><span class="p">)</span>

<span class="n">main</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) Vector(3, 3)
       Vector(7, 7)
       Vector(10, 10)
</code></pre></div></div>
:ET