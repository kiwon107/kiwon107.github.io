I" +<p>본 포스팅은 “윤성우의 열혈 파이썬 중급편” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="17-1-부모-클래스와-자식-클래스">17-1. 부모 클래스와 자식 클래스</h2>

<p>다음 그림을 보자.</p>

<p class="align-center"><img src="/assets/images/pythonmd/17-1.JPG" alt="그림 17-1. 파이썬 상속의 예" /></p>
<p>그림 17-1. 파이썬 상속의 예 (참조: https://techvidvan.com/tutorials/python-inheritance/) <br /></p>

<ul>
  <li>Vehicle 클래스: 부모클래스, 슈퍼클래스, 상위클래스<br /></li>
  <li>Car, Bus, Bike 클래스: 자식클래스, 서브클래스, 하위클래스<br /></li>
</ul>

<p>상속을 하면 부모클래스가 갖는 모든 메소드를 자식클래스도 갖게 된다!<br />
또한, 자식클래스에는 부모클래스가 갖는 메소드 외 별도의 메소드도 추가될 수 있다!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Vehicle</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"가즈아!"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Car</span><span class="p">(</span><span class="n">Vehicle</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">go</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"붕붕~"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Bus</span><span class="p">(</span><span class="n">Vehicle</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">go2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"부아앙~"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ElectricCar</span><span class="p">(</span><span class="n">Car</span><span class="p">,</span> <span class="n">Bus</span><span class="p">):</span> <span class="c1"># 둘 이상의 상속도 가능
</span>  <span class="k">def</span> <span class="nf">tesla</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"나는 대세"</span><span class="p">)</span>

<span class="n">c</span> <span class="o">=</span> <span class="n">Car</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">go</span><span class="p">()</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">ElectricCar</span><span class="p">()</span>
<span class="n">e</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="n">e</span><span class="p">.</span><span class="n">go</span><span class="p">()</span>
<span class="n">e</span><span class="p">.</span><span class="n">go2</span><span class="p">()</span>
<span class="n">e</span><span class="p">.</span><span class="n">tesla</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) 가즈아!
       붕붕~

       가즈아!
       붕붕~
       부아앙~
       나는 대세
</code></pre></div></div>

<h2 id="17-2-메소드-오버라이딩과-super">17-2. 메소드 오버라이딩과 super</h2>

<p>상속 관계에 있을 때, 부모 클래스가 갖는 메소드와 동일한 이름의 메소드를 자식클래스가 갖는다면? <br />
이것을 가리켜 메소드 오버라이딩 이라고 한다!<br />
메소드 오버리이딩의 경우에는 부모클래스의 메소드는 호출이 불가능한 상태가 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Car</span><span class="p">(</span><span class="n">Vehicle</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">go</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"붕붕~"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ElectricCar</span><span class="p">(</span><span class="n">Car</span><span class="p">):</span> <span class="c1"># 둘 이상의 상속도 가능
</span>  <span class="k">def</span> <span class="nf">go</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"우우웅.."</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">go2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c1"># 만약 부모클래스의 go()를 호출하고 싶다면 super()를 활용하자!
</span>    <span class="nb">super</span><span class="p">().</span><span class="n">go</span><span class="p">()</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">ElectricCar</span><span class="p">()</span>
<span class="n">e</span><span class="p">.</span><span class="n">go</span><span class="p">()</span>
<span class="n">e</span><span class="p">.</span><span class="n">go2</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) 우우웅..
       붕붕~
</code></pre></div></div>

<h2 id="17-3-init-메소드의-오버라이딩">17-3. <strong>init</strong> 메소드의 오버라이딩</h2>

<p>메소드 오버라이딩을 할 수 밖에 없으면서 호출이 불가능한 메소드를 호출해야만 하는 상황이 있을 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Car</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="nb">id</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">fuel</span> <span class="o">=</span> <span class="n">f</span>
  <span class="k">def</span> <span class="nf">drive</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">fuel</span> <span class="o">-=</span> <span class="mi">10</span>
  <span class="k">def</span> <span class="nf">add_fuel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">fuel</span> <span class="o">+=</span> <span class="n">f</span>
  <span class="k">def</span> <span class="nf">show_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"id:"</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"fuel:"</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">fuel</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Truck</span><span class="p">(</span><span class="n">Car</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">cargo</span> <span class="o">=</span> <span class="n">c</span>
  <span class="k">def</span> <span class="nf">add_cargo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">cargo</span> <span class="o">+=</span> <span class="n">c</span>
  <span class="k">def</span> <span class="nf">show_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">().</span><span class="n">show_info</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"cargo:"</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">cargo</span><span class="p">)</span>

<span class="n">t</span> <span class="o">=</span> <span class="n">Truck</span><span class="p">(</span><span class="s">"52오5252"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">t</span><span class="p">.</span><span class="n">add_fuel</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="n">t</span><span class="p">.</span><span class="n">add_cargo</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
<span class="n">t</span><span class="p">.</span><span class="n">drive</span><span class="p">()</span>
<span class="n">t</span><span class="p">.</span><span class="n">show_info</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) id: 52오5252
       fuel: 90
       cargo: 50
</code></pre></div></div>

<p>위 상황은 자식클래스의 <strong>init</strong> 메소드 내 부모클래스의 <strong>init</strong> 메소드가 호출되어야 하는 상황이다. 그래야 객체 생성 시 필요로 하는 모든 변수를 초기화 할 수 있다. 이 때 자식클래스의 <strong>init</strong> 는 부모의 변수를 초기화 할 값도 함께 전달받아야 한다!</p>
:ET