I"	?<p>본 포스팅은 “윤성우의 열혈 파이썬 중급편” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="10-1-dict-생성-방법">10-1. dict 생성 방법</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d1</span> <span class="o">=</span> <span class="p">{</span><span class="s">'a'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'b'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'c'</span><span class="p">:</span><span class="mi">3</span><span class="p">}</span>
<span class="n">d2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="s">'a'</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">'c'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])</span>
<span class="n">d3</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>   <span class="c1"># 키가 문자열일 때!
</span><span class="n">d4</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">([</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]))</span>  <span class="c1"># 키와 값 별도로 묶어서 생성함
</span><span class="n">d1</span>
<span class="n">d2</span>
<span class="n">d3</span>
<span class="n">d4</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) {'a': 1, 'b': 2, 'c': 3}
      {'a': 1, 'b': 2, 'c': 3}
      {'a': 1, 'b': 2, 'c': 3}
      {'a': 1, 'b': 2, 'c': 3}
</code></pre></div></div>

<p>원래 딕셔너리 같은 저장소는 저장 순서가 따로 없다. 하지만 파이썬 3.7부터는 저장 순서를 보장한다고 한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'a'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">'b'</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">'c'</span><span class="p">:</span><span class="mi">3</span><span class="p">}</span>
<span class="n">d</span><span class="p">[</span><span class="s">'d'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>

<span class="n">d</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s">', '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) {'a': 1, 'b': 2, 'c': 3}
      1, 2, 3, 4
</code></pre></div></div>

<h2 id="10-2-zip-함수">10-2. zip 함수</h2>
<p>zip 함수는 인자로 리스트, 튜플, 또는 문자열을 받는다. 이들의 위치에 있는 값들 끼리 조합해서 다수의 튜플을 만들어 내는게 zip 함수의 역할이다. zip 함수가 적용되면 iterable 객체가 반환된다. 따라서 zip이 반환하는 객체는 for 루프에 들어갈 수 있다!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z1</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">([</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">z2</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">((</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">z3</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="s">'abc'</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">z1</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>

<span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">z2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>

<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">z3</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) ('a', 1), ('b', 2), ('c', 3),
      ('a', 1), ('b', 2), ('c', 3),
      ('a', 1), ('b', 2), ('c', 3),
</code></pre></div></div>

<p>zip 함수가 적용된 녀석을 list에 담을 수도 있고, 튜플이나 dict에 담을 수도 있다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">((</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># 3개 이상을 조합해서 zip 함수 적용도 가능하다!
</span><span class="n">l</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">((</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># iterable 객체가 이미 사용되어 다시 z를 만들지 않으면 빈값이 된다.
</span><span class="n">t</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">((</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
<span class="n">l</span>
<span class="n">t</span>
<span class="n">d</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [('a', 1), ('b', 2), ('c', 3)]
      (('a', 1), ('b', 2), ('c', 3))
      {'a': 1, 'b': 2, 'c': 3}
</code></pre></div></div>

<h2 id="10-3-딕셔너리-루핑-기술">10-3. 딕셔너리 루핑 기술</h2>
<p>딕셔너리의 다음 세가지 메소드를 알아두자!</p>

<p>dict.keys(): 딕셔너리의 키들만 참조<br />
dict.values(): 딕셔너리의 값들만 참조<br />
dict.items(): 딕셔너리 키와 값을 튜플 형태로 참조<br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>

<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>

<span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">d</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>

<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="s">', '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) a, b, c,
      1, 2, 3,
      ('a', 1), ('b', 2), ('c', 3),
      a, 1
      b, 2
      c, 3
</code></pre></div></div>

<p>이들은 모두 ‘뷰 객체’를 반환한다.</p>

<h2 id="10-4-뷰-객체">10-4. 뷰 객체</h2>
<p>뷰 객체는 딕셔너리의 현재 상태를 그대로 반영한다는 특징이 있다. 무슨 뜻인지 다음 예제를 보면 바로 이해가 될 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'a'</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'b'</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'c'</span> <span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">vu</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>

<span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">vu</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">', '</span><span class="p">)</span>

<span class="n">d</span><span class="p">[</span><span class="s">'a'</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">10</span>
<span class="n">d</span><span class="p">[</span><span class="s">'c'</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">2</span>

<span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">vu</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">', '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) ('a', 1), ('b', 2), ('c', 3),
      ('a', 11), ('b', 2), ('c', 1),
</code></pre></div></div>

<h2 id="10-5-dict-컴프리헨션">10-5. dict 컴프리헨션</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d1</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="s">'a'</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">'c'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])</span>
<span class="n">d2</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span><span class="o">*</span><span class="mi">2</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d1</span><span class="p">.</span><span class="n">items</span><span class="p">()}</span>
<span class="n">d3</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span><span class="o">*</span><span class="mi">2</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d2</span><span class="p">.</span><span class="n">items</span><span class="p">()}</span>
<span class="n">d1</span>
<span class="n">d2</span>
<span class="n">d3</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) {'a': 1, 'b': 2, 'c': 3}
      {'a': 2, 'b': 4, 'c': 6}
      {'a': 4, 'b': 8, 'c': 12}
</code></pre></div></div>
:ET