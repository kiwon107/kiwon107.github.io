I"C0<p>본 포스팅은 “혼자 공부하는 머신러닝+딥러닝” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="4-1-합성곱">4-1. 합성곱</h2>
<p><strong>합성곱(Convolution)</strong>은 마치 입력 데이터에 마법의 도장을 찍어서 유용한 특성만 드러나게 하는 것이다. 인공 신경망은 처음에 가중치 $w_{1}$ ~ $w_{10}$ 과 절편 $b$를 랜덤하게 초기화한 다음 에포크를 반복하면서 경사 하강법 알고리즘을 사용하여 손실이 낮아지도록 최적의 가중치와 절편을 찾아간다. 합성곱은 이와 조금 다르게 입력 데이터 전체에 가중치를 적용하는 것이 아닌 일부에 가중치를 곱한다. 첫 번째 합성곱에 사용된 가중치 $w_{1}$ ~ $w_{3}$ 과 절편 $b$가 두 번째 합성곱에도 동일하게 사용된다. 이렇게 한 칸씩 아래로 이동하면서 출력을 만드는 것이 바로 합성곱이다. 합성곱 층의 뉴런에 있는 가중치 개수는 정하기 나름이다. 이 가중치는 마치 입력 데이터 위를 이동하면서 같은 도장으로 하나씩 찍는 것처럼 생각할 수 있다. 입력 위를 이동하면서 출력을 만드는 뉴런을 <strong>합성곱 신경망(Convolutional neural network)</strong>에서는 <strong>필터(Filter)</strong> 혹은 <strong>커널(Kernel)</strong> 라고 부른다.<br /></p>

<p>합성곱의 장점은 2차원 입력에도 적용할 수 있다는 것이다. 필터의 커널 크기를 (3, 3)으로 가정하고 입력의 9개 원소와 커널의 9개 가중치를 곱한 후 절편을 더하여 1개의 출력을 만든다. 그 다음 필터가 오른쪽 한 칸 이동하여 합성곱을 또 수행한다. 입력의 너비 만큼 이동이 끝났으면 그 다음 아래로 한 칸 이동하여 다시 왼쪽에서부터 합성곱을 수행한다. 이처럼 입력과 가중치의 행과 열을 맞추어 곱헴하고 더하는게 전부이다. 합성곱 계산을 통해 얻은 출력은 <strong>특성 뱁(Feature map)</strong>라고 부른다.</p>

<p>밀집층에서 여러개의 뉴런을 사용했다. 합성곱 층에서도 여러 개의 필터를 사용한다. 만약 (2, 2) 특성맵이 출력된다 할 때, 3개의 필터를 사용한다면 (2, 2, 3) 크기의 3차원 배열이 출력된다. 이 때 합성곱 층에 있는 필터의 가중치(커널)는 모두 다르다. 정리하자면, 합성곱의 실제 계산은 밀집층과 동일하게 단순히 입력과 가중치를 곱하는 것이지만 2차원 형태를 유지하는 점이 다르다. 또한 입력보다 훨씬 작은 크기의 커널을 사용하고 입력 위를 이동하면서 2차원 특성 맵을 만든다. 이렇게 2차원 구조를 그대로 이용하므로 이미지 처리 분야에서 뛰어난 성능을 발휘한다.</p>

<h2 id="4-2-케라스-합성곱-층">4-2. 케라스 합성곱 층</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
<span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Conv2D</code> 클래스의 첫 번째 매개변수는 필터의 개수이다. <code class="language-plaintext highlighter-rouge">kernel_size</code> 매개변수는 필터에 사용할 커널의 크기를 지정한다. 이 두 매개변수는 반드시 지정해야 하는 매개변수이다. 마지막으로 활성화 함수를 지정한다. 참고로 일반적인 특성 맵은 활성화 함수를 통과한 값을 의미한다. 커널의 크기는 하이퍼파라미터이므로 여러 가지 값을 시도해봐야 한다. 보통 (3, 3)이나 (5, 5)가 많이 쓰인다. 일반적으로 1개 이상의 합성곱 층을 쓴 인공 신경망을 합성공 신경망이라고 부른다.</p>

<h2 id="4-3-패딩과-스트라이드">4-3. 패딩과 스트라이드</h2>
<p>(4, 4) 크기의 입력에 (3, 3) 크기의 커널을 적용하면 (2, 2) 특성 맵이 만들어진다. 만약 출력의 크기를 입력과 동일하게 (4, 4)로 만들려면 어떻게 해야 할까? 입력과 동일한 크기의 출력을 만들려면 더 큰 입력을 만들어줘야 한다. 실제 입력 크기가 (4, 4)일 경우 (6, 6)으로 만들어 줘야 (3, 3) 크기의 커널로 합성곱 했을 때 (4, 4) 출력이 나온다. 이렇게 입력 주위를 가상의 원소로 채워 크기를 늘리는 방법을 <strong>패딩(Padding)</strong>라고 한다. 실제 입력값이 아니므로 패딩은 0을 채운다. 즉 (4, 4) 이미지 바깥 주면으로 한줄씩 0을 채워 (6, 6) 크기의 입력을 만든다. 패딩의 역할은 순전히 커널이 도장을 찍을 횟수를 늘려주는 것 외에는 없다. 실제 값은 0으로 채워져 있어 계산에 영향을 미치지는 않는다. 이렇게 입력과 특성 맵의 크기를 동일하게 만들기 위해 입력 주위에 0으로 패딩 하는 것을 <strong>세임 패딩(Same padding)</strong>라고 한다. 패딩 없이 순수한 입력 배열에서만 합성곱을 하여 특성 맵을 만드는 경우를 <strong>밸리드 패딩(Valid padding)</strong> 라고 한다. 밸리드 패딩은 특성 맵 크기가 줄어들 수밖에 없다.</p>

<p>패딩은 왜 하는 걸까? 만약 패딩없이 합성곱을 한다면 네 모서리 모퉁이에 있는 값들은 1번~2번 이상 커널과 계산되는 반면 다른 원소들은 3번~4번 계산된다. 즉, 모서리에 있는 중요한 정보가 특성 맵으로 잘 전달되지 않을 가능성이 있는 것이다. 반면 가운데 있는 정보는 두드러지게 표현된다. 적절한 패딩은 이처럼 이미지의 주변에 있는 정보를 잃어버리지 않도록 도와준다. 합성곱 신경망에서는 세임 패딩이 많이 사용된다. <code class="language-plaintext highlighter-rouge">padding</code> 매개변수로 패딩을 지정할 수 있다. 기본값은 <code class="language-plaintext highlighter-rouge">valid</code> 이며 세임 패딩을 사용하려면 <code class="language-plaintext highlighter-rouge">same</code>으로 지정한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span>
</code></pre></div></div>

<p>지금까지 합성곱 연산을 위해 필터가 한칸씩 좌우, 위아래로 움직였다. 하지만 두 칸 이상씩 움직일 수도 있다. 이렇게 움직이면 특성맵의 크기는 더 작아질 것이다. 이런 이동의 크기를 <strong>스트라이드(Stride)</strong>라고 한다. 기본으로 스트라이드는 1이다. <code class="language-plaintext highlighter-rouge">Conv2D</code> 의 <code class="language-plaintext highlighter-rouge">stride</code> 매개변수 값을 통해 지정할 수 있다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">strides</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">strides</code> 매개변수는 오른쪽으로 이동하는 크기와 아래쪽으로 이동하는 크기를 (1, 1)과 같이 튜플을 사용하여 각각 지정할 수 있다. 하지만 커널의 이동 크기를 가로, 세로 방향으로 다르게 지정하는 경우는 거의 없다. 1보다 큰 스트라이드를 사용하는 경우도 드물다.</p>

<h2 id="4-4-풀링">4-4. 풀링</h2>
<p><strong>풀링(Pooling)</strong>은 합성곱 층에서 만든 특성 맵의 가로세로 크기를 줄이는 역할을 한다. 특성 맵의 개수가 줄어드는 것은 아니다. 풀링도 입력 위를 지나가면서 도장을 찍는다. 하지만 풀링에는 가중치가 없고 도장을 찍은 영역에서 가장 큰 값을 고르거나 평균값을 계산한다. 이를 각각 <strong>최대 풀링(Max pooling)</strong>과 <strong>평균 풀링(Average pooling)</strong>라고 부른다. 풀링은 합성곱 층과 뚜렷이 구분되어 풀링 층이라 불리운다. 예를 들어 (4, 4) 크기의 특성 맵에 (2, 2) 최대 풀링을 적용하면 절반으로 크기가 줄어든다. 만약 10개의 특성 맵이 있다면, 풀링을 거친 특성 맵도 10개가 된다. 눈여결 볼 점은 풀링 영역은 두 칸씩 이동한다는 것이다. 합성곱에서는 커널이 한 칸씩 이동하여 겹치는 부분이 있었다. 풀링에서는 겹치지 않고 이동한다. 따라서 풀링 크기가 (2, 2) 이면 가로세로 두 칸씩 이동한다. 즉 스트라이드가 2인 것이다. <code class="language-plaintext highlighter-rouge">MaxPooling2D</code> 클래스로 풀링을 수행할 수 있다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>풀링은 가중치가 없고 풀링 크기와 스트라이드가 같다. 패딩은 없다.<br />
<code class="language-plaintext highlighter-rouge">MaxPooling2D</code> 첫 번째 매개변수로 풀링 크기를 지정한다. 대부분 풀링 크기는 2이다. 가로세로 방향 다르게 하려면 (2, 3) 같이 지정해주면 된다. 합성곱과 마찬가지로 풀링도 <code class="language-plaintext highlighter-rouge">strides</code>와 <code class="language-plaintext highlighter-rouge">padding</code> 매개변수를 제공한다. <code class="language-plaintext highlighter-rouge">padding</code>은 기본값을 <code class="language-plaintext highlighter-rouge">valid</code>로 하여 패딩을 하지 않는다. <code class="language-plaintext highlighter-rouge">strides</code>의 기본값은 풀링의 크기라 따로 지정할 필요가 없다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'valid'</span><span class="p">)</span>
</code></pre></div></div>

:ET