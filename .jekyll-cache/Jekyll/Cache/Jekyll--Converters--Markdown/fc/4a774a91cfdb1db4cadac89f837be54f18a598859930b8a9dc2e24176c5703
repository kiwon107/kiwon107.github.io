I"B1<p>본 포스팅은 “윤성우의 열혈 파이썬 중급편” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="13-1-자료형-분류">13-1. 자료형 분류</h2>

<ul>
  <li>시퀀스 타입: 저장된 값의 순서 정보 존재<br />
Ex) 리스트, 튜플, 레인지, 문자열<br />
    <ul>
      <li>인덱싱 연산: 특정 값 하나 참조<br />
Ex) a[0], a[1], …<br /></li>
      <li>슬라이싱 연산: 시작과 끝 정하여 참조<br />
Ex) a[0:3]<br /></li>
    </ul>
  </li>
  <li>
    <p>매핑 타입: 저장된 값의 순서나 위치 정보 기록하지 않는 자료형(3.7부터는 저장 값 순서 유지하지만 인덱싱이나 슬라이싱 연산 불가능)<br />
Ex) 딕셔너리</p>
  </li>
  <li>셋 타입: 수학의 집합을 표현한 자료형. 저장 순서 정보 없고 중복된 값의 저장도 허용하지 않는다.<br />
Ex) 셋, 프로즌 셋</li>
</ul>

<h2 id="13-2-set">13-2. set</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="o">=</span> <span class="p">{</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">}</span>
<span class="n">B</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">])</span> <span class="c1"># set함수는 iterable 객체를 입력으로 활용한다.
</span><span class="n">C</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">'edba'</span><span class="p">)</span>

<span class="n">A</span> <span class="o">-</span> <span class="n">B</span> <span class="c1"># 차집합
</span><span class="n">A</span> <span class="o">&amp;</span> <span class="n">B</span> <span class="c1"># 교집합
</span><span class="n">A</span> <span class="o">|</span> <span class="n">B</span> <span class="c1"># 합집합
</span><span class="n">A</span> <span class="o">^</span> <span class="n">B</span> <span class="c1"># 대칭 차집합, (A-B) U (B-A)
</span><span class="n">B</span> <span class="o">==</span> <span class="n">C</span> <span class="c1"># 저장 순서 상관없이 값만 같으면 된다!
</span><span class="s">'a'</span> <span class="ow">in</span> <span class="n">B</span>
<span class="s">'c'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">B</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">A</span> <span class="o">|</span> <span class="n">B</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) {'c'}
       {'d', 'a', 'b'}
       {'b', 'd', 'a', 'c', 'e'}
       {'c', 'e'}
       True
       True
       True
       b d a c e
</code></pre></div></div>

<p>빈 set을 생성하려면 다음을 참고하라.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># 이렇게 하면 빈 dictionary가 생성된다!
</span><span class="n">b</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="nb">type</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) &lt;class 'dict'&gt;
       &lt;class 'set'&gt;
</code></pre></div></div>

<p>셋은 중복된 값들을 하나만 남기고 삭제하는데 활용할 수도 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'ㅋ'</span><span class="p">,</span> <span class="s">'ㅋ'</span><span class="p">]</span>
<span class="n">r</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
<span class="n">r</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [2, 'ㅋ', 5]
</code></pre></div></div>

<h2 id="13-3-frozenset-set과-frozenset-차이">13-3. frozenset, set과 frozenset 차이</h2>
<p>13-2의 첫 코드에 set 대신 frozenset을 적용해도 set과 동일해보인다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">((</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">))</span>
<span class="n">B</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">([</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">])</span> <span class="c1"># set함수는 iterable 객체를 입력으로 활용한다.
</span><span class="n">C</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">(</span><span class="s">'edba'</span><span class="p">)</span>

<span class="n">A</span> <span class="o">-</span> <span class="n">B</span> <span class="c1"># 차집합
</span><span class="n">A</span> <span class="o">&amp;</span> <span class="n">B</span> <span class="c1"># 교집합
</span><span class="n">A</span> <span class="o">|</span> <span class="n">B</span> <span class="c1"># 합집합
</span><span class="n">A</span> <span class="o">^</span> <span class="n">B</span> <span class="c1"># 대칭 차집합, (A-B) U (B-A)
</span><span class="n">B</span> <span class="o">==</span> <span class="n">C</span> <span class="c1"># 저장 순서 상관없이 값만 같으면 된다!
</span><span class="s">'a'</span> <span class="ow">in</span> <span class="n">B</span>
<span class="s">'c'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">B</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">A</span> <span class="o">|</span> <span class="n">B</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) frozenset({'c'})
       frozenset({'d', 'a', 'b'})
       frozenset({'b', 'd', 'a', 'c', 'e'})
       frozenset({'c', 'e'})
       True
       True
       True
       b d a c e
</code></pre></div></div>

<p>그러나 이들은 차이가 있다.</p>

<p>set: Mutable 객체라 값의 추가, 삭제 가능<br />
frozenset: Immutable 객체라 값의 추가, 삭제 불가능<br /></p>

<p>set이 Mutable 객체이므로 다음과 같은 메소드 또는 연산을 수행할 수 있다.<br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="n">l</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="c1"># 원소 추가
</span><span class="n">l</span>
<span class="n">l</span><span class="p">.</span><span class="n">discard</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># 원소 삭제
</span><span class="n">l</span>
<span class="n">l</span><span class="p">.</span><span class="n">update</span><span class="p">({</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">})</span> <span class="c1"># 다른 집합의 원소 전부 추가, l |= {7, 8, 9} 와 동일
</span><span class="n">l</span>
<span class="n">l</span><span class="p">.</span><span class="n">intersection_update</span><span class="p">({</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">})</span> <span class="c1"># 다른 집합과 공통의 원소만 남기기, l &amp;= {2, 4, 6, 8} 와 동일
</span><span class="n">l</span>
<span class="n">l</span><span class="p">.</span><span class="n">difference_update</span><span class="p">({</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">})</span> <span class="c1"># 다른 집합이 갖는 원소 모두 삭제, l -= {2, 4} 와 동일
</span><span class="n">l</span>
<span class="n">l</span><span class="p">.</span><span class="n">symmetric_difference_update</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">})</span> <span class="c1"># 공통으로 갖지 않는 것들 추가하고 공통으로 갖는건 삭제하며 나머지는 그대로 둠, l ^= {1, 3, 6} 와 동일
</span><span class="n">l</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) {1, 2, 3, 4, 5, 6}
       {2, 3, 4, 5, 6}
       {2, 3, 4, 5, 6, 7, 8, 9}
       {8, 2, 4, 6}
       {6, 8}
       {1, 3, 8}
</code></pre></div></div>

<h2 id="13-4-set-컴프리헨션">13-4. set 컴프리헨션</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sc1</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)}</span>
<span class="n">sc2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sc1</span><span class="p">}</span>
<span class="n">sc3</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sc2</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">}</span>

<span class="n">sc1</span>
<span class="n">sc2</span>
<span class="n">sc3</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
       {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
       {8, 2, 4, 6}
</code></pre></div></div>
:ET