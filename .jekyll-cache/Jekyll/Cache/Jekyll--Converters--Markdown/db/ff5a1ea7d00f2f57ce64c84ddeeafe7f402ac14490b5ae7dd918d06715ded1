I".<p>본 포스팅은 “윤성우의 열혈 파이썬 중급편” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="7-1-map--filter">7-1. Map &amp; Filter</h2>

<p>설명 없이 바로 코드부터 들어간다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">2</span>

<span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">num_square</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">pow</span><span class="p">,</span> <span class="n">num</span><span class="p">))</span>
<span class="n">num_square</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [4, 9, 25]
</code></pre></div></div>

<p>이것만 봐도 map 함수가 어떤 것인지 알 수 있지 않는가? <br />
map 함수는 무엇을 리턴하는 걸까? 다음 코드를 보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">2</span>

<span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">ir</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">square</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>
<span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) 4
     9
     25
</code></pre></div></div>

<p>보다시피 map 함수는 iterator 객체를 리턴하게 된다!</p>

<p>iterator 객체를 리턴한다는 것은 iterable 객체가 입력으로 들어간다는 것이다.<br />
map 함수의 두번째 인자는 iterable 객체여야 한다.<br />
따라서 리스트 뿐만 아니라, 튜플, 문자열도 두번째 인자로 들어갈 수 있다.</p>

<p>만약 2개의 매개변수를 갖는 함수에 map 함수를 적용하고 싶다면 다음과 같이 코드를 짜보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span>

<span class="n">num1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">num2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">nums_sum</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">))</span>
<span class="n">nums_sum</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [7, 6, 7]
</code></pre></div></div>

<h2 id="7-2-map과-람다">7-2. map과 람다</h2>
<p>앞서 배운 람다와 이번에 배운 map 함수를 동시에 써먹어볼 시간이다. 그 전에 뭐 하나만 보고 가자.<br />
바로 iterable 객체 값 꺼내서 역방향으로 정렬하기이다!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">'안녕하세여'</span>
<span class="n">s</span><span class="p">[</span> <span class="p">:</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># 2를 넣으면 한칸씩 띄어서 출력
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[결과] '여세하녕안'
</code></pre></div></div>

<p>됐다! 이제 적용해보자!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subject</span> <span class="o">=</span> <span class="p">[</span><span class="s">'파이썬'</span><span class="p">,</span> <span class="s">'운영체제'</span><span class="p">,</span> <span class="s">'딥러닝'</span><span class="p">]</span> <span class="c1"># 이번년도 상반기 공부할 내용들...
</span><span class="n">rev_subject</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="p">[</span> <span class="p">:</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">subject</span><span class="p">))</span>
<span class="n">rev_subject</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) ['썬이파', '제체영운', '닝러딥']
</code></pre></div></div>

<p>혹시 <code class="language-plaintext highlighter-rouge">['닝러딥', '제체영운', '썬이파']</code> 가 나올꺼라 생각했나?<br /></p>

<p>map이 iterator 객체를 리턴한다는 것을 항상 기억하자! iterator 객체를 리턴하면 next 함수를 적용할 때 먼저 ‘파이썬’이 나오고, 이 문자열을 반전시킨다.
그리고 나머지도 똑같이 적용된다 생각한다면 금방 이해할 수 있을 것이다!</p>

<h2 id="7-3-filter">7-3. Filter</h2>
<p>Fileter 함수는 Map 함수와 비슷하다. 차이라면, Map 함수는 함수가 리턴한 값을 그대로 반영하는 반면, Filter 함수는 함수가 True를 리턴한 경우에 대해 요소 값을 처리한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="c1"># 짝수면 0(False) 리턴, 홀수면 1(True) 리턴
</span>
<span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">ost</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">find_odd</span><span class="p">,</span> <span class="n">num</span><span class="p">))</span>
<span class="n">ost</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [1, 3, 5]
</code></pre></div></div>

<p>보다시피, Filter 함수의 첫번째 인자는 True나 False를 리턴하는 함수가 와야하며, 두번째 인자는 iterable 객체가 와야한다.</p>

<p>마지막 예제는 지금까지 배운 것들을 응용하여, 1~10 중 3의 배수만 골라 제곱을 적용해 리스트에 저장하는 기능을 만들어 보겠다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">))</span>
<span class="n">three_squares</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="ow">not</span><span class="p">(</span><span class="n">a</span> <span class="o">%</span> <span class="mi">3</span><span class="p">),</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">nums</span><span class="p">)))</span>
<span class="n">three_squares</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [9, 36, 81]
</code></pre></div></div>

<p>Filter 함수의 경우, True인 값만 리턴하므로, 3의 배수인 경우 <code class="language-plaintext highlighter-rouge">a % 3 = 0</code> 이 되기 때문에 not 함수를 주어 True로 반전 시키도록 한다.</p>

<h1 id="7-4-map과-filter를-대신하는-리스트-컴프리헨션">7-4. map과 filter를 대신하는 리스트 컴프리헨션</h1>

<p>위 예제를 리스트 컴프리헨션으로 나타낼 수 있다!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">))</span>
<span class="n">three_squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">three_squares</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [9, 36, 81]
</code></pre></div></div>

<p>뭔가 filter와 map 함수를 동시에 활용한 것보다 더 심플해보인다!</p>
:ET