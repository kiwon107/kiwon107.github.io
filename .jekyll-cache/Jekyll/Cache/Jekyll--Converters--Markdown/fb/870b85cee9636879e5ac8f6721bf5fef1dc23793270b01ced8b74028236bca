I"-1<p>본 포스팅은 “혼자 공부하는 머신러닝+딥러닝” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="13-1-k-평균-알고리즘-소개">13-1. K-평균 알고리즘 소개</h2>
<p>k-평균 알고리즘 작동 방식은 다음과 같다.<br />
 1). 무작위로 k개의 클러스터 중심을 정한다.<br />
 2). 각 샘플에서 가장 가까운 클러스터 중심을 찾아 해당 클러스터의 샘플로 지정한다.<br />
 3). 클러스터에 속한 샘플의 평균값으로 클러스터 중심을 변경한다.<br />
 4). 클러스터 중심에 변화가 없을 때까지 2번으로 돌아가 반복한다.<br /></p>

<p>평균값이 클러스터의 중심에 위치하므로 <strong>클러스터 중심(Cluster center)</strong> 또는 <strong>센트로이드(Centroid)</strong> 라고 한다.</p>

<h2 id="13-2-kmeans-클래스">13-2. KMeans 클래스</h2>
<p>3차원 배열을 2차원 배열 형태로 변경하자.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">fruits</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'fruits_300.npy'</span><span class="p">)</span>
<span class="n">fruits_2d</span> <span class="o">=</span> <span class="n">fruits</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
<span class="n">km</span> <span class="o">=</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>  <span class="c1"># n_clusters로 클러스터 개수 지정
</span><span class="n">km</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">fruits_2d</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">labels_</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
       2 2 2 2 2 0 2 0 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 0 0 2 2 2 2 2 2 2 2 0 2
       2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0
       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
       1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
       1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
       1 1 1 1]
</code></pre></div></div>

<p>레이블 0, 1, 2로 모은 샘플의 개수를 확인해보자.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">labels_</span><span class="p">,</span> <span class="n">return_counts</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) (array([0, 1, 2]), array([111,  98,  91], dtype=int64))
</code></pre></div></div>

<p>각 클러스터가 어떤 이미지를 나타냈는지 그림으로 출력하기 위한 함수를 만들어보자.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">draw_fruits</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">ratio</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ceil</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">10</span><span class="p">))</span>
    <span class="n">cols</span> <span class="o">=</span> <span class="n">n</span> <span class="k">if</span> <span class="n">rows</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="k">else</span> <span class="mi">10</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="n">cols</span><span class="o">*</span><span class="n">ratio</span><span class="p">,</span> <span class="n">rows</span><span class="o">*</span><span class="n">ratio</span><span class="p">),</span> <span class="n">squeeze</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">cols</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">axs</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="n">imshow</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">j</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'gray_r'</span><span class="p">)</span>
                <span class="n">axs</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>이제 불리언 인덱싱을 적용하여 True인 위치의 원소를 모두 추출하자.<br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw_fruits</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">km</span><span class="p">.</span><span class="n">labels_</span><span class="o">==</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p class="align-center"><img src="/assets/images/machinelearning/13-1.png" alt="그림 13-1. 코드 결과" /></p>
<p>그림 13-1. 코드 결과</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw_fruits</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">km</span><span class="p">.</span><span class="n">labels_</span><span class="o">==</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>
<p class="align-center"><img src="/assets/images/machinelearning/13-2.png" alt="그림 13-2. 코드 결과" /></p>
<p>그림 13-2. 코드 결과</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw_fruits</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">km</span><span class="p">.</span><span class="n">labels_</span><span class="o">==</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div>
<p class="align-center"><img src="/assets/images/machinelearning/13-3.png" alt="그림 13-3. 코드 결과" /></p>
<p>그림 13-3. 코드 결과</p>

<p>레이블이 0인 클러스터는 파인애플, 1인 클러스터는 바나나, 2인 클러스터는 사과로 이루어져 있다. 레이블이 0인 클러스터는 사과도 섞여 있는 것으로 보인다. 그럼에도 불구하고 비슷한 샘플들이 꽤 졸 모아졌다.</p>

<h2 id="13-3-클러스터-중심">13-3. 클러스터 중심</h2>
<p><code class="language-plaintext highlighter-rouge">KMeans</code> 클래스가 최종적으로 찾은 클러스터 중심은 <code class="language-plaintext highlighter-rouge">cluster_centers_</code> 속성에 저장된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw_fruits</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">cluster_centers_</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="n">ratio</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>
<p class="align-center"><img src="/assets/images/machinelearning/13-4.png" alt="그림 13-4. 코드 결과" /></p>
<p>그림 13-4. 코드 결과</p>

<p><code class="language-plaintext highlighter-rouge">KMeans</code> 클래스는 훈련 데이터 샘플에서 클러스터 중심까지 거리로 변환해주는 <code class="language-plaintext highlighter-rouge">transform()</code> 메소드를 가진다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">fruits_2d</span><span class="p">[</span><span class="mi">100</span><span class="p">:</span><span class="mi">101</span><span class="p">]))</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [[3393.8136117  8837.37750892 5267.70439881]]
</code></pre></div></div>

<p>보다시피 반환된 배열은 크기가 (1, 클러스터 개수)인 2차원 배열이다. 첫 번째 클러스터까지의 거리가 가장 작은 것으로 보아 이 샘플은 레이블 0에 속한 것으로 보인다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">fruits_2d</span><span class="p">[</span><span class="mi">100</span><span class="p">:</span><span class="mi">101</span><span class="p">]))</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(결과) [0]
</code></pre></div></div>
:ET