I"<p>본 포스팅은 “펭귄브로의 3분 딥러닝, 파이토치맛” 책 내용을 기반으로 작성되었습니다.
잘못된 내용이 있을 경우 지적해 주시면 감사드리겠습니다.</p>

<h2 id="4-1-fashion-mnist">4-1. Fashion MNIST</h2>
<p>딥러닝에서는 모델보다 좋은 데이터 셋이 더 중요하다. 데이터셋은 우리가 풀고자 하는 문제를 정의하는 역할을 한다고 봐야한다. 문제 정의가 잘못되면 풀이를 아무리 열심히해도 말짱 도루묵이다.<br />
Fashion MNIST는 28 x 28 픽셀을 가진 70,000 개의 흑백 이미지로 구성된다. 신발, 드레스, 가방 등 총 10가지 카테고리가 있다. 실제 서비스를 만들 때, 딥러닝 엔지니어는 대부분 데이터를 가공하고 파이프라인을 만드는데 쓴다. 이처럼 데이터를 얻고 가공하는데 많은 시간이 소모되지만, 토치비전은 다행히 Fashion MNIST 데이터셋을 자동으로 내려받을 수 있고 심지어 학습 데이터를 나누는 일까지 해준다.<br /></p>

<p>일단 이미지 데이터를 다루기 위한 파이토치와 토치비전 관련 몇가지 모듈을 확인해보자.<br /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">torch.utils.data</code>: 데이터셋 표준 정의, 데이터셋 불러오기, 자르기, 섞기 관련 도구들 제공. <code class="language-plaintext highlighter-rouge">torch.utils.data.Dataset</code>이 데이터셋의 표준 정의함. <code class="language-plaintext highlighter-rouge">torch.utils.data.DataLoader</code> 클래스는 <code class="language-plaintext highlighter-rouge">Dataset</code> 모듈을 상속하는데, 인스턴스 입력으로 학습에 필요한 데이터를 로딩해줌.</li>
  <li><code class="language-plaintext highlighter-rouge">torchvision.datasets</code>: <code class="language-plaintext highlighter-rouge">torch.utils.data.Dataset</code> 상속하는 이미지 데이터셋 모음. 패션 아이템 데이터셋은 여기에 들어있음.</li>
  <li><code class="language-plaintext highlighter-rouge">torchvision.transforms</code>: 이미지 데이터셋에 쓸 여러가지 변환 필터 들어있음. 텐서로의 변환, 크기조절(resize), 크롭(crop)과 같은 이미지 수정 기능이 있으며, 밝기(brightness), 대비(contrast) 등 조절하는 기능도 있음.</li>
  <li><code class="language-plaintext highlighter-rouge">torchvision.utils</code>: 이미지 데이터 저장 및 시각화 위한 도구 들어있음.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">datasets</span><span class="p">,</span> <span class="n">transforms</span><span class="p">,</span> <span class="n">utils</span>
<span class="kn">from</span> <span class="nn">torch.utils</span> <span class="kn">import</span> <span class="n">data</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<p>이제 이미지를 텐서로 바꿔주는 코드를 입력하자. 참고로 <code class="language-plaintext highlighter-rouge">torchvision.transforms</code> 안에 있는 주요 기능들은 다음과 같다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ToTensor</code>: 이미지를 파이토치 텐서로 변환</li>
  <li><code class="language-plaintext highlighter-rouge">Resize</code>: 이미지 크기 조정</li>
  <li><code class="language-plaintext highlighter-rouge">Normalize</code>: 주어진 평균과 표준편차 이용하여 정규화</li>
  <li><code class="language-plaintext highlighter-rouge">RandomHorizontalFlip</code>: 무작위로 이미지 오른쪽과 왼쪽 뒤집는 기능</li>
  <li><code class="language-plaintext highlighter-rouge">RandomCrop</code>: 이미지를 무작위로 자르는 기능</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transform</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="n">Compose</span><span class="p">([</span><span class="n">transforms</span><span class="p">.</span><span class="n">ToTensor</span><span class="p">()])</span>
</code></pre></div></div>

<p>위에서는 <code class="language-plaintext highlighter-rouge">ToTensor()</code> 함수만 썻지만, <code class="language-plaintext highlighter-rouge">transforms.Compose()</code> 함수안의 리스트에 여러가지 기능 넣어주면 순서대로 변환이 이루어진다!</p>

<p>이제 <code class="language-plaintext highlighter-rouge">torchvision.datasets</code> 패키지를 활용하여 데이터셋을 내려받고 <code class="language-plaintext highlighter-rouge">Compose()</code> 함수로 만든 이미지 변환 설정을 적용하자.</p>
:ET